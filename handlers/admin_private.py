from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter, or_f
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from kbds.inline import get_callback_btns
from filters.users_filter import OwnerFilter
from database.queries import (
    orm_get_users,
    orm_get_subscribers,
    orm_block_user,
    orm_get_tariffs,
    orm_add_tariff,
    orm_delete_tariff,
    orm_edit_tariff,
    orm_get_products,
    orm_add_products,
    orm_delete_products,
    orm_edit_products,
    orm_add_faq,
    orm_get_faq,
    orm_delete_faq,
    orm_edit_faq
)

admin_private_router = Router()
admin_private_router.message.filter(OwnerFilter())


@admin_private_router.message(Command("admin"))
async def start(message: types.Message):
	await message.answer("–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ, —á–µ–º –∑–∞–π–º–µ–º—Å—è —Å–µ–≥–æ–¥–Ω—è?", reply_markup=get_callback_btns(btns={
        'üìÉ –£–ø–∞—Ä–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏': 'tariffs_list',
        'üìÉ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤': 'orders_list',
        'üì´ –†–∞—Å—Å—ã–ª–∫–∞': 'send',
        '‚öô –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å FAQ': 'edit_faq',
    }, sizes=(2,2,1)))
	

# –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤
@admin_private_router.callback_query(F.data == 'tariffs_list')
async def choose_category(callback_query: types.CallbackQuery, session):
    await callback_query.answer()
    product_list = await orm_get_products(session)

    for product in product_list:
        await callback_query.message.answer(
            text=f"<b>–ò–º—è:</b> {product.name}\n<b>–°—Ä–æ–∫:</b> {product.sub_time} –¥–Ω–µ–π\n<b>–¶–µ–Ω–∞:</b> {product.price}\n<b>ID –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> {product.pay_id}\n<b>–¢–∏–ø: –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂</b>", 
            reply_markup=get_callback_btns(btns={'–ò–∑–º–µ–Ω–∏—Ç—å': f'editonepay_{product.id}', '–£–¥–∞–ª–∏—Ç—å': f'deleteonepay_{product.id}'})
        )

    tariff_list = await orm_get_tariffs(session)

    for tariff in tariff_list:
        await callback_query.message.answer(
            text=f"<b>–ò–º—è:</b> {tariff.name}\n<b>–°—Ä–æ–∫:</b> {tariff.sub_time} –º–µ—Å—è—Ü–µ–≤\n<b>–¶–µ–Ω–∞:</b> {tariff.price}\n<b>ID –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> {tariff.pay_id}\n<b>–¢–∏–ø: –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –ø–ª–∞—Ç–µ–∂</b>", 
            reply_markup=get_callback_btns(btns={'–ò–∑–º–µ–Ω–∏—Ç—å': f'edittariff_{tariff.id}', '–£–¥–∞–ª–∏—Ç—å': f'deletetariff_{tariff.id}'})
        )
    
    if tariff_list:
        await callback_query.message.answer(
                text="–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤ ‚¨Ü", 
                reply_markup=get_callback_btns(btns={'–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ': f'addtariff', '–î–æ–±–∞–≤–∏—Ç—å –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂': f'addonepay'})
            )
    else:
        await callback_query.message.answer(
                text="–¢–∞—Ä–∏—Ñ–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç", 
                reply_markup=get_callback_btns(btns={'–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ': f'addtariff'})
            )


# FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤
class FSMAddTariff(StatesGroup):
    name = State()
    sub_time = State()
    price = State()
    pay_id = State()

# Undo text for add tariff FSM
FSMAddTariff_undo_text = {
    'FSMAddTariff:name': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –∑–∞–Ω–æ–≤–æ',
    'FSMAddTariff:sub_time': '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏ (–≤ –¥–Ω—è—Ö) –∑–∞–Ω–æ–≤–æ',
    'FSMAddTariff:price': '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–Ω–æ–≤–æ',
    'FSMAddTariff:pay_id': '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–Ω–æ–≤–æ',
}

# Cancel handler for FSMAddTariff
@admin_private_router.message(StateFilter("*"), F.text.in_({'/–æ—Ç–º–µ–Ω–∞', '–æ—Ç–º–µ–Ω–∞'}))
async def cancel_fsm_add_tariff(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.clear()
    await message.answer('‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ')

# Back handler for FSMAddTariff
@admin_private_router.message(StateFilter('FSMAddTariff'), F.text.in_({'/–Ω–∞–∑–∞–¥', '–Ω–∞–∑–∞–¥'}))
async def back_step_add_tariff(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == FSMAddTariff.name.state:
        await message.answer('–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"')
        return
    previous = None
    for step in FSMAddTariff.all_states:
        if step.state == current_state:
            if previous is not None:
                await state.set_state(previous.state)
                await message.answer(f"–û–∫, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É. {FSMAddTariff_undo_text[previous.state]}")
            return
        previous = step


@admin_private_router.callback_query(StateFilter(None), F.data == "addtariff")
async def add_product(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞(–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ . —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):')
    await state.set_state(FSMAddTariff.name)


@admin_private_router.message(FSMAddTariff.name)
async def add_product_description(message: types.Message, state: FSMContext):
    if message.text == '.':
        await state.update_data(name='')
    else:
        await state.update_data(name=message.text)
    
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏ (–≤ –º–µ—Å—è—Ü–∞—Ö):')
    await state.set_state(FSMAddTariff.sub_time)


@admin_private_router.message(FSMAddTariff.sub_time)
async def add_product_description(message: types.Message, state: FSMContext):
    try:
        await state.update_data(sub_time=int(message.text))
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏:')
        await state.set_state(FSMAddTariff.price)
    except:
         await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏ (–≤ –º–µ—Å—è—Ü–∞—Ö) –µ—â–µ —Ä–∞–∑:')


@admin_private_router.message(FSMAddTariff.price)
async def add_product_description(message: types.Message, state: FSMContext):
    try:
        await state.update_data(price=int(message.text))
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:')
        await state.set_state(FSMAddTariff.pay_id)
    except:
         await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –µ—â–µ —Ä–∞–∑:')


@admin_private_router.message(FSMAddTariff.pay_id)
async def add_product(message: types.Message, state: FSMContext, session):
    await state.update_data(pay_id=message.text.split('=')[-1])
    await message.answer('‚úÖ –¢–∞—Ä–∏—Ñ –¥–æ–±–∞–≤–ª–µ–Ω')
    data = await state.get_data()
    await orm_add_tariff(session=session, data=data)
    await state.clear()


# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
@admin_private_router.callback_query(F.data.startswith('deletetariff_'))
async def delete_product(callback_query: types.CallbackQuery, session):
    await callback_query.answer()
    await orm_delete_tariff(session, callback_query.data.split('_')[-1])
    await callback_query.message.answer("‚úÖ –¢–∞—Ä–∏—Ñ —É–¥–∞–ª–µ–Ω")
    await callback_query.message.delete()


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
class FSMEditTariff(StatesGroup):
    name = State()
    sub_time = State()
    price = State()
    pay_id = State()


@admin_private_router.callback_query(StateFilter(None), F.data.startswith("edittariff"))
async def add_product(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(tariff_id=callback.data.split('_')[-1])
    await callback.answer()
    await callback.message.answer('–í—ã —Å–æ–∑–¥–∞–µ—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ. –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /–æ—Ç–º–µ–Ω–∞ –∏–ª–∏ /–Ω–∞–∑–∞–¥')
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞(–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ . —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):')
    await state.set_state(FSMEditTariff.name)


@admin_private_router.message(FSMEditTariff.name)
async def edit_tariff_name(message: types.Message, state: FSMContext):
    if message.text == '.':
        await state.update_data(name=None)
    else:
        await state.update_data(name=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏ (–≤ –º–µ—Å—è—Ü–∞—Ö) (–∏–ª–∏ . —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):')
    await state.set_state(FSMEditTariff.sub_time)

@admin_private_router.message(FSMEditTariff.sub_time)
async def edit_tariff_sub_time(message: types.Message, state: FSMContext):
    if message.text == '.':
        await state.update_data(sub_time=None)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ (–∏–ª–∏ . —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):')
        await state.set_state(FSMEditTariff.price)
        return
    try:
        await state.update_data(sub_time=int(message.text))
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ (–∏–ª–∏ . —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):')
        await state.set_state(FSMEditTariff.price)
    except:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏ (–≤ –º–µ—Å—è—Ü–∞—Ö) –µ—â–µ —Ä–∞–∑:')

@admin_private_router.message(FSMEditTariff.price)
async def edit_tariff_price(message: types.Message, state: FSMContext):
    if message.text == '.':
        await state.update_data(price=None)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã (–∏–ª–∏ . —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):')
        await state.set_state(FSMEditTariff.pay_id)
        return
    try:
        await state.update_data(price=int(message.text))
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã (–∏–ª–∏ . —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):')
        await state.set_state(FSMEditTariff.pay_id)
    except:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –µ—â–µ —Ä–∞–∑:')

@admin_private_router.message(FSMEditTariff.pay_id)
async def edit_tariff_pay_id(message: types.Message, state: FSMContext, session):
    if message.text == '.':
        await state.update_data(pay_id=None)
    else:
        await state.update_data(pay_id=message.text.split('=')[-1])
    data = await state.get_data()
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ None
    update_fields = {k: v for k, v in data.items() if v is not None}
    del update_fields['tariff_id']
    await message.answer('‚úÖ –¢–∞—Ä–∏—Ñ –∏–∑–º–µ–Ω–µ–Ω')
    await orm_edit_tariff(session=session, tariff_id=data['tariff_id'], fields=update_fields)
    await state.clear()


# FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
class FSMAddOnePay(StatesGroup):
    name = State()
    sub_time = State()
    price = State()
    pay_id = State()

# Undo text for add tariff FSM
FSMAddOnePay_undo_text = {
    'FSMAddTariff:name': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞–Ω–æ–≤–æ',
    'FSMAddTariff:sub_time': '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–ª–∞—Ç–µ–∂–∞ (–≤ –¥–Ω—è—Ö) –∑–∞–Ω–æ–≤–æ',
    'FSMAddTariff:price': '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–ª–∞—Ç–µ–∂–∞ –∑–∞–Ω–æ–≤–æ',
    'FSMAddTariff:pay_id': '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–Ω–æ–≤–æ',
}

# Cancel handler for FSMAddTariff
@admin_private_router.message(StateFilter("*"), F.text.in_({'/–æ—Ç–º–µ–Ω–∞', '–æ—Ç–º–µ–Ω–∞'}))
async def cancel_fsm_add_tariff(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.clear()
    await message.answer('‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ')

# Back handler for FSMAddTariff
@admin_private_router.message(StateFilter('FSMAddOnePay'), F.text.in_({'/–Ω–∞–∑–∞–¥', '–Ω–∞–∑–∞–¥'}))
async def back_step_add_tariff(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == FSMAddOnePay.name.state:
        await message.answer('–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"')
        return
    previous = None
    for step in FSMAddOnePay.all_states:
        if step.state == current_state:
            if previous is not None:
                await state.set_state(previous.state)
                await message.answer(f"–û–∫, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É. {FSMAddOnePay_undo_text[previous.state]}")
            return
        previous = step


@admin_private_router.callback_query(StateFilter(None), F.data == "addonepay")
async def add_product(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞(–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ . —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):')
    await state.set_state(FSMAddOnePay.name)


@admin_private_router.message(FSMAddOnePay.name)
async def add_product_description(message: types.Message, state: FSMContext):
    if message.text == '.':
        await state.update_data(name='')
    else:
        await state.update_data(name=message.text)
    
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏ (–≤ –¥–Ω—è—Ö):')
    await state.set_state(FSMAddOnePay.sub_time)


@admin_private_router.message(FSMAddOnePay.sub_time)
async def add_product_description(message: types.Message, state: FSMContext):
    try:
        await state.update_data(sub_time=int(message.text))
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–ª–∞—Ç–µ–∂–∞:')
        await state.set_state(FSMAddOnePay.price)
    except:
         await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏ (–≤ –¥–Ω—è—Ö) –µ—â–µ —Ä–∞–∑:')


@admin_private_router.message(FSMAddOnePay.price)
async def add_product_description(message: types.Message, state: FSMContext):
    try:
        await state.update_data(price=int(message.text))
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:')
        await state.set_state(FSMAddOnePay.pay_id)
    except:
         await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –µ—â–µ —Ä–∞–∑:')


@admin_private_router.message(FSMAddOnePay.pay_id)
async def add_product(message: types.Message, state: FSMContext, session):
    await state.update_data(pay_id=message.text.split('=')[-1])
    await message.answer('‚úÖ –¢–∞—Ä–∏—Ñ –¥–æ–±–∞–≤–ª–µ–Ω')
    data = await state.get_data()
    await orm_add_products(session=session, data=data)
    await state.clear()


# –£–¥–∞–ª–µ–Ω–∏–µ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
@admin_private_router.callback_query(F.data.startswith('deleteonepay_'))
async def delete_product(callback_query: types.CallbackQuery, session):
    await callback_query.answer()
    await orm_delete_products(session, callback_query.data.split('_')[-1])
    await callback_query.message.answer("‚úÖ –ü–ª–∞—Ç–µ–∂–∞ —É–¥–∞–ª–µ–Ω")
    await callback_query.message.delete()


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
class FSMEditOnePay(StatesGroup):
    name = State()
    sub_time = State()
    price = State()
    pay_id = State()


@admin_private_router.callback_query(StateFilter(None), F.data.startswith("editonepay"))
async def add_product(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(tariff_id=callback.data.split('_')[-1])
    await callback.answer()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞(–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ . —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):')
    await state.set_state(FSMEditOnePay.name)


@admin_private_router.message(FSMEditOnePay.name)
async def edit_tariff_name(message: types.Message, state: FSMContext):
    if message.text == '.':
        await state.update_data(name=None)
    else:
        await state.update_data(name=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏ (–≤ –¥–Ω—è—Ö) (–∏–ª–∏ . —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):')
    await state.set_state(FSMEditOnePay.sub_time)

@admin_private_router.message(FSMEditOnePay.sub_time)
async def edit_tariff_sub_time(message: types.Message, state: FSMContext):
    if message.text == '.':
        await state.update_data(sub_time=None)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ (–∏–ª–∏ . —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):')
        await state.set_state(FSMEditOnePay.price)
        return
    try:
        await state.update_data(sub_time=int(message.text))
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ (–∏–ª–∏ . —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):')
        await state.set_state(FSMEditOnePay.price)
    except:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏ (–≤ –¥–Ω—è—Ö) –µ—â–µ —Ä–∞–∑:')

@admin_private_router.message(FSMEditOnePay.price)
async def edit_tariff_price(message: types.Message, state: FSMContext):
    if message.text == '.':
        await state.update_data(price=None)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã (–∏–ª–∏ . —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):')
        await state.set_state(FSMEditOnePay.pay_id)
        return
    try:
        await state.update_data(price=int(message.text))
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã (–∏–ª–∏ . —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):')
        await state.set_state(FSMEditOnePay.pay_id)
    except:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –µ—â–µ —Ä–∞–∑:')

@admin_private_router.message(FSMEditOnePay.pay_id)
async def edit_tariff_pay_id(message: types.Message, state: FSMContext, session):
    if message.text == '.':
        await state.update_data(pay_id=None)
    else:
        await state.update_data(pay_id=message.text.split('=')[-1])
    data = await state.get_data()
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ None
    update_fields = {k: v for k, v in data.items() if v is not None}
    del update_fields['tariff_id']
    await message.answer('‚úÖ –¢–∞—Ä–∏—Ñ –∏–∑–º–µ–Ω–µ–Ω')
    await orm_edit_products(session=session, tariff_id=data['tariff_id'], fields=update_fields)
    await state.clear()


# FAQ
@admin_private_router.callback_query(F.data == 'edit_faq')
async def edit_faq(callback: types.CallbackQuery, state: FSMContext, session):
    
    await callback.answer()
    faq_list = await orm_get_faq(session)
    for faq in faq_list:
        await callback.message.answer(
            text=f"<b>–í–æ–ø—Ä–æ—Å:</b> {faq.ask}\n<b>–û—Ç–≤–µ—Ç:</b> {faq.answer}",
            reply_markup=get_callback_btns(btns={'–ò–∑–º–µ–Ω–∏—Ç—å': f'editfaq_{faq.id}', '–£–¥–∞–ª–∏—Ç—å': f'deletefaq_{faq.id}'})
        )
    if faq_list:
        await callback.message.answer(
                text="–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ ‚¨Ü",
                reply_markup=get_callback_btns(btns={'–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å': f'addfaq'})
            )
    else:
        await callback.message.answer(
                text="–í–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç",
                reply_markup=get_callback_btns(btns={'–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å': f'addfaq'})
            )


# FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
class FSMAddFAQ(StatesGroup):
    ask = State()
    answer = State()


@admin_private_router.callback_query(StateFilter(None), F.data == "addfaq")
async def add_faq(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:')
    await state.set_state(FSMAddFAQ.ask)


@admin_private_router.message(FSMAddFAQ.ask)
async def add_faq_description(message: types.Message, state: FSMContext):
    await state.update_data(ask=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:')
    await state.set_state(FSMAddFAQ.answer)


@admin_private_router.message(FSMAddFAQ.answer)
async def add_faq_description(message: types.Message, state: FSMContext, session):
    await state.update_data(answer=message.text)
    await message.answer('‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω')
    data = await state.get_data()
    await orm_add_faq(session=session, data=data)
    await state.clear()


# FSM –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
class FSMEditFAQ(StatesGroup):
    id = State()
    ask = State()
    answer = State()


@admin_private_router.callback_query(StateFilter(None), F.data.startswith("editfaq"))
async def edit_faq(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(faq_id=callback.data.split('_')[-1])
    await callback.answer()
    await callback.message.answer('–í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –≤–æ–ø—Ä–æ—Å. –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /–æ—Ç–º–µ–Ω–∞ –∏–ª–∏ /–Ω–∞–∑–∞–¥')
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–∞–ø–∏—à–∏—Ç–µ ".":')
    await state.set_state(FSMEditFAQ.ask)


@admin_private_router.message(FSMEditFAQ.ask)
async def edit_faq_name(message: types.Message, state: FSMContext):
    if message.text == '.':
        await state.update_data(ask=None)
    else:
        await state.update_data(ask=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç, –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–∞–ø–∏—à–∏—Ç–µ ".":')
    await state.set_state(FSMEditFAQ.answer)


@admin_private_router.message(FSMEditFAQ.answer)
async def edit_faq_description(message: types.Message, state: FSMContext, session):
    if message.text == '.':
        await state.update_data(answer=None)
    else:
        await state.update_data(answer=message.text)
    data = await state.get_data()
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ None
    update_fields = {k: v for k, v in data.items() if v is not None}
    del update_fields['faq_id']
    await message.answer('‚úÖ –í–æ–ø—Ä–æ—Å –∏–∑–º–µ–Ω–µ–Ω')
    await orm_edit_faq(session=session, id=data['faq_id'], fields=update_fields)
    await state.clear()


# –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
@admin_private_router.callback_query(F.data.startswith('deletefaq_'))
async def delete_faq(callback_query: types.CallbackQuery, session):
    await callback_query.answer()
    await orm_delete_faq(session, callback_query.data.split('_')[-1])
    await callback_query.message.answer("‚úÖ –í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω")
    await callback_query.message.delete()


class FSMSendMessages(StatesGroup):
    message = State()
    picture = State()
    recipients = State()


@admin_private_router.callback_query(StateFilter(None), F.data == "send")
async def send_messages(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:')
    await state.set_state(FSMSendMessages.message)


@admin_private_router.message(FSMSendMessages.message)
async def send_messages_description(message: types.Message, state: FSMContext):
    await state.update_data(message=message.text)
    await message.answer('–û—Ç–ø—Ä–∞–≤—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–∞. –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–∞ —Ç–æ –æ—Ç–ø—Ä–∞–≤—Ç–µ ".":')
    await state.set_state(FSMSendMessages.picture)


@admin_private_router.message(FSMSendMessages.picture, or_f(F.photo, F.text))
async def send_messages_picture(message: types.Message, state: FSMContext):
    if message.text == '.':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –∏–ª–∏ –≤—Å–µ (–≤–∫–ª—é—á–∞—è –≥–æ—Å—Ç–µ–π).', reply_markup=get_callback_btns(btns={'–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏': 'active_subscribers', '–í—Å–µ': 'all'}))
        await state.set_state(FSMSendMessages.recipients)
    else:
        await state.update_data(picture=message.photo[0].file_id)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –∏–ª–∏ –≤—Å–µ (–≤–∫–ª—é—á–∞—è –≥–æ—Å—Ç–µ–π).', reply_markup=get_callback_btns(btns={'–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏': 'active_subscribers', '–í—Å–µ': 'all'}))
        await state.set_state(FSMSendMessages.recipients)


@admin_private_router.callback_query(FSMSendMessages.recipients, F.data == "active_subscribers")
async def send_messages_active_subscribers(callback: types.CallbackQuery, state: FSMContext, session, bot):
    await callback.answer()
    users = await orm_get_subscribers(session)
    for user in users:
        data = await state.get_data()

        if data.get('picture'):
            await bot.send_photo(chat_id=user.user_id, photo=data['picture'], caption=data['message'])
        else:
            await bot.send_message(chat_id=user.user_id, text=data['message'])
        
    
    await callback.message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    await state.clear()


@admin_private_router.callback_query(FSMSendMessages.recipients, F.data == "all")
async def send_messages_active_subscribers(callback: types.CallbackQuery, state: FSMContext, session, bot):
    await callback.answer()
    users = await orm_get_users(session)
    for user in users:
        data = await state.get_data()
        if data.get('picture'):
            await bot.send_photo(chat_id=user.user_id, photo=data['picture'], caption=data['message'])
        else:
            await bot.send_message(chat_id=user.user_id, text=data['message'])
    
    await callback.message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    await state.clear()


# –ó–∞–∫–∞–∑—ã 
@admin_private_router.callback_query(StateFilter(None), F.data == "orders_list")
async def orders_list(callback: types.CallbackQuery, session):
    await callback.answer()
    message_text = ""
    orders = await orm_get_users(session)
    for order in orders:
        if order.status > 0:
            message_text = f"<b>ID:</b> {order.user_id}\n<b>–ò–º—è:</b> {order.name}\n<b>–°—Ç–∞—Ç—É—Å:</b> {order.status}\n"
    

    if message_text:
        await callback.message.answer(
            text=message_text,
            reply_markup=get_callback_btns(btns={'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è': f'blockuser_{order.user_id}'})
        )
        await callback.message.answer(
                text="–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ ‚¨Ü",
            )
    else:
        await callback.message.answer(
                text="–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç",
            )
