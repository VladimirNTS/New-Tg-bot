from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from kbds.inline import get_callback_btns
from filters.users_filter import OwnerFilter
from database.queries import (
    orm_add_product, 
    orm_create_categories, 
    orm_get_categories, 
    orm_get_products,
    orm_edit_category,
    orm_delete_product
)

admin_private_router = Router()
admin_private_router.message.filter(OwnerFilter())


@admin_private_router.message(Command("admin"))
async def start(message: types.Message):
	await message.answer("–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ, —á–µ–º –∑–∞–π–º–µ–º—Å—è —Å–µ–≥–æ–¥–Ω—è?", reply_markup=get_callback_btns(btns={
        'üìÉ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤': 'products_list',
        'üìÉ –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π': 'categories_list',
        '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä': 'add_product',
        '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é': 'add_catigory',
        '‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏': 'settings'
    }, sizes=(2,2,1)))
	

# –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@admin_private_router.callback_query(F.data == 'categories_list')
async def choose_category(callback_query: types.CallbackQuery, session):
    await callback_query.answer()
    category_list = await orm_get_categories(session)

    for category in category_list:
        await callback_query.message.answer(
            text=f"<b>–ò–º—è:</b> {category.name}", 
            reply_markup=get_callback_btns(btns={'–ò–∑–º–µ–Ω–∏—Ç—å': f'editcategory_{category.id}', '–£–¥–∞–ª–∏—Ç—å': f'deletecategory_{category.id}'})
        )


# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@admin_private_router.callback_query(F.data.startswith('deletecategory_'))
async def change_category_name(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.update_data(category_id=callback_query.data.split('_')[-1])
    await state.set_state(FSMEditCategory.name)


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
class FSMEditCategory(StatesGroup):
    name = State()


@admin_private_router.callback_query(F.data.startswith('editcategory_'))
async def change_category_name(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.update_data(category_id=callback_query.data.split('_')[-1])
    await state.set_state(FSMEditCategory.name)


@admin_private_router.message(FSMEditCategory.name, F.text)
async def edit_category(message: types.Message, state: FSMContext, session):
    category_id = await state.get_data()
    await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ –Ω–∞ {message.text}")
    await orm_edit_category(session=session, category_id=category_id['category_id'], name=message.text)

    await state.clear()


# –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–∞
@admin_private_router.callback_query(F.data == 'products_list')
async def choose_category(callback_query: types.CallbackQuery, session):
    await callback_query.answer()
    category_list = await orm_get_categories(session)

    await callback_query.message.answer(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', 
        reply_markup=get_callback_btns(btns={str(i.name): 'category_'+str(i.id) for i in category_list})
    )


@admin_private_router.callback_query(F.data.startswith('category_'))
async def send_products_list(callback_query: types.CallbackQuery, session):
    await callback_query.answer()
    products_list = await orm_get_products(session, callback_query.data.split('_')[-1])

    for product in products_list:
        await callback_query.message.answer_photo(
            photo=product.image, 
            caption=f"<b>–ò–º—è:</b> {product.name}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product.description}\n\n<b>–¶–µ–Ω–∞:</b> {product.price}",
            reply_markup=get_callback_btns(btns={'–ò–∑–º–µ–Ω–∏—Ç—å': f'editproduct_{product.id}', '–£–¥–∞–ª–∏—Ç—å': f'deleteproduct_{product.id}'})
            )

    await callback_query.message.answer("‚úÖ –í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ ‚¨ÜÔ∏è")


# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@admin_private_router.callback_query(StateFilter('*'), F.data.startswith('deleteproduct_'))
async def delete_product(callback_query: types.CallbackQuery, session):
    await callback_query.answer()
    await orm_delete_product(session, callback_query.data.split('_')[-1])
    await callback_query.message.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω")
    await callback_query.message.delete()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –æ—Ç–º–µ–Ω—ã FSM
@admin_private_router.message(StateFilter('*'), Command('–æ—Ç–º–µ–Ω–∞'))
async def CanselFSM(message: types.Message, state: FSMContext):
    currant_state = state.get_state()
    if currant_state == None:
        return
    
    await state.clear()
    await message.answer('‚ùå –î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã')


# FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
class FSMAddCategory(StatesGroup):
    name = State()


@admin_private_router.callback_query(StateFilter(None), F.data == "add_catigory")
async def add_product(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏–∏:')
    await state.set_state(FSMAddCategory.name)


@admin_private_router.message(FSMAddCategory.name, F.text)
async def add_product(message: types.Message, state: FSMContext, session):
    await message.answer('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞')
    await orm_create_categories(session=session, categories=[message.text])
    await state.clear()



# FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
class FSMAddProduct(StatesGroup):
    name = State()
    description = State()
    price = State()
    image = State()
    category_id = State()

    undo_text = {
		'FSMAddProduct:name': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≥–æ',
        'FSMAddProduct:description': '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω–æ–≥–æ',
		'FSMAddProduct:price': '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–Ω–æ–≥–æ',
        'FSMAddProduct:image': '–ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–Ω–æ–≥–æ',
        'FSMAddProduct:category_id': '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≥–æ',
    }


@admin_private_router.message(StateFilter('FSMAddProduct'), Command("–Ω–∞–∑–∞–¥"))
async def back_step_handler(message: types.Message, state: FSMContext) -> None:
    '''–®–∞–≥ –Ω–∞–∑–∞–¥'''

    current_state = await state.get_state()

    if current_state == FSMAddProduct.name:
        await message.answer('–ü—Ä–µ–¥–∏–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"')
        return

    previous = None
    for step in FSMAddProduct.all_states:
        if step.state == current_state:
            await state.set_state(previous)
            await message.answer(f"–û–∫, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É \n {FSMAddProduct.undo_text[previous.state]}")
            return
        previous = step


@admin_private_router.callback_query(StateFilter(None), F.data == "add_product")
async def add_product(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–∏—à–∏—Ç–µ: /–æ—Ç–º–µ–Ω–∞ \n–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —à–∞–≥ –Ω–∞–∑–∞–¥ –ø–∏—à–∏—Ç–µ: /–Ω–∞–∑–∞–¥ \n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:')
    await state.set_state(FSMAddProduct.name)


@admin_private_router.message(FSMAddProduct.name)
async def add_product_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:')
    await state.set_state(FSMAddProduct.description)


@admin_private_router.message(FSMAddProduct.description)
async def add_product_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:')
    await state.set_state(FSMAddProduct.price)


@admin_private_router.message(FSMAddProduct.price)
async def add_product_price(message: types.Message, state: FSMContext):
    try:
        await state.update_data(price=float(message.text))
        await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:')
        await state.set_state(FSMAddProduct.image)
    except:
         await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")


@admin_private_router.message(FSMAddProduct.image, F.photo)
async def add_product_image(message: types.Message, state: FSMContext, session):
    await state.update_data(image=message.photo[-1].file_id)
    categories = await orm_get_categories(session=session)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=get_callback_btns(btns={str(i.name): str(i.id) for i in categories}))
    await state.set_state(FSMAddProduct.category_id)


@admin_private_router.callback_query(FSMAddProduct.category_id)
async def add_product_category(callback: types.CallbackQuery, state: FSMContext, session):
    await state.update_data(category=callback.data)
    await callback.answer()
    await callback.message.answer('‚úÖ –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω')
    data = await state.get_data()
    await orm_add_product(session, data)
    await state.clear()




