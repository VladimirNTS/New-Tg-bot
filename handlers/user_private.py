from aiogram import Router, types, F
from aiogram.filters import Command
from io import BytesIO
import time
import os

import qrcode
from filters.users_filter import BlockedUsersFilter

from kbds.inline import get_callback_btns, get_inlineMix_btns, get_url_btns
from database.queries import (
    orm_get_tariffs,
    orm_get_faq,
    orm_get_user,
    orm_add_user,
    orm_get_products
)

user_private_router = Router()
user_private_router.message.filter(BlockedUsersFilter())

@user_private_router.message(Command("start"))
async def start(message: types.Message, session):
    await orm_add_user(session=session, user_id=message.from_user.id, name=message.from_user.full_name)
    await message.answer_photo(
        photo=types.FSInputFile("img/banner.png"),
        caption="<b>SkynetVPN —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –≤ –æ–¥–∏–Ω –∫–ª–∏–∫</b>\n–° –Ω–∞–º–∏ –í—ã –ø–æ–¥ –Ω–∞–¥—ë–∂–Ω–æ–π –∑–∞—â–∏—Ç–æ–π\n–ù–∏–∫—Ç–æ –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–µ–º, —á—Ç–æ –≤—ã —Å–º–æ—Ç—Ä–∏—Ç–µ", 
        reply_markup=get_inlineMix_btns(
            btns={"üìÑ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É": "choosesubscribe", "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É": "check_subscription", "ü§ù —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–∞": "referral_program", "‚ùì FAQ": "faq", "‚òé –ü–æ–¥–¥–µ—Ä–∂–∫–∞": "https://t.me/skynetaivpn_support"}, 
            sizes=(1,1,1,2)
        )
    )
    

@user_private_router.callback_query(F.data=='back_menu')
async def start(callback: types.CallbackQuery):
    photo = types.InputMediaPhoto(
			media=types.FSInputFile("img/banner.png"),  # –∏–ª–∏ BufferedInputFile –¥–ª—è —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç–∏
			caption=f"<b>SkynetVPN —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –≤ –æ–¥–∏–Ω –∫–ª–∏–∫.</b>\n–° –Ω–∞–º–∏ –í—ã –ø–æ–¥ –Ω–∞–¥—ë–∂–Ω–æ–π –∑–∞—â–∏—Ç–æ–π.\n–ù–∏–∫—Ç–æ –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–µ–º, —á—Ç–æ –≤—ã —Å–º–æ—Ç—Ä–∏—Ç–µ."
		)
	
    await callback.message.edit_media(
        media=photo,
        reply_markup=get_inlineMix_btns(
            btns={"üìÑ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É": "choosesubscribe", "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É": "check_subscription", "ü§ù —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–∞": "referral_program", "‚ùì FAQ": "faq", "‚òé –ü–æ–¥–¥–µ—Ä–∂–∫–∞": "https://t.me/skynetaivpn_support"}, 
            sizes=(1,1,1,2)
        )
    )


@user_private_router.callback_query(F.data == 'choosesubscribe')
async def choose_subscribe(callback: types.CallbackQuery, session):
    user = await orm_get_user(session, callback.from_user.id)
    tariffs = await orm_get_tariffs(session)
    products = await orm_get_products(session)
    btns = {"‚¨Ö –ù–∞–∑–∞–¥": "back_menu"}

    for i in products:
        if i.sub_time == 1:
            btns[f'{i.sub_time} –¥–µ–Ω—å, {i.price} ‚ÇΩ (–ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞)'] = f'{os.getenv("PAY_PAGE_URL")}/new_order?user_id={user.id}&sub_id={i.id}'
        elif i.sub_time < 5:
            btns[f'{i.sub_time} –¥–Ω—è, {i.price} ‚ÇΩ (–ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞)'] = f'{os.getenv("PAY_PAGE_URL")}/new_order?user_id={user.id}&sub_id={i.id}'
        else:
            btns[f'{i.sub_time} –¥–Ω–µ–π, {i.price} ‚ÇΩ (–ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞)'] = f'{os.getenv("PAY_PAGE_URL")}/new_order?user_id={user.id}&sub_id={i.id}'
    
    for i in tariffs:
        if i.sub_time == 1:
            btns[f'{i.sub_time} –º–µ—Å—è—Ü–µ–≤, {i.price} ‚ÇΩ (–ü–æ–¥–ø–∏—Å–∫–∞)'] = f'{os.getenv("PAY_PAGE_URL")}/new_subscribe?user_id={user.id}&sub_id={i.id}'
        elif i.sub_time < 5:
            btns[f'{i.sub_time} –º–µ—Å—è—Ü–∞, {i.price} ‚ÇΩ (–ü–æ–¥–ø–∏—Å–∫–∞)'] = f'{os.getenv("PAY_PAGE_URL")}/new_subscribe?user_id={user.id}&sub_id={i.id}'
        else:
            btns[f'{i.sub_time} –º–µ—Å—è—Ü, {i.price} ‚ÇΩ (–ü–æ–¥–ø–∏—Å–∫–∞)'] = f'{os.getenv("PAY_PAGE_URL")}/new_subscribe?user_id={user.id}&sub_id={i.id}'
    
    await callback.message.edit_caption(caption='<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ</b>\n\n<b>–ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞</b> - –≤—ã –ø–ª–∞—Ç–∏—Ç–µ 1 —Ä–∞–∑, –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n<b>–ü–æ–¥–ø–∏—Å–∫–∞</b> - –¥–µ–Ω—å–≥–∏ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —É–∫–∞–∑–∞–Ω–æ–º—É —Å—Ä–æ–∫—É, –≤–∞–º –ª–∏—à—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –æ–ø–ª–∞—Ç—É 1 –ø–æ –∫–Ω–æ–ø–∫–µ –≤ –±–æ—Ç–µ.', reply_markup=get_inlineMix_btns(btns=btns, sizes=(1,)))


@user_private_router.callback_query(F.data == 'referral_program')
async def referral_program_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    bot_username = (await callback.bot.me()).username
    referral_link = f"https://t.me/{bot_username}?start={user_id}"

    text = callback.message.text
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    timestamp = int(time.time())
    qr_filename = f"qr_{user_id}_{timestamp}.png"
    
    # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(text)
    qr.make(fit=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º QR-–∫–æ–¥ –≤ —Ñ–∞–π–ª
    img = qr.make_image(fill_color="black", back_color="white")
    img.save(qr_filename)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        photo = types.InputMediaPhoto(
			media=types.FSInputFile(qr_filename),  # –∏–ª–∏ BufferedInputFile –¥–ª—è —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç–∏
			caption=f"–ü—Ä–∏–≤–æ–¥–∏ –¥—Ä—É–∑–µ–π –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä–æ–¥–ª–µ–≤–∞–π —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ –∏—Ö –ø–æ–∫—É–ø–∫–∏:\n–ó–∞ 1 –º–µ—Å - 15 –¥–Ω–µ–π \n–ó–∞ 6 –º–µ—Å - 30 –¥–Ω–µ–π \n–ó–∞ 12 –º–µ—Å - 45 –¥–Ω–µ–π\n\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<a src='{referral_link}'>{referral_link}</a>"
		)
        await callback.message.edit_media(media=photo, reply_markup=get_callback_btns(btns={ "‚¨Ö –ù–∞–∑–∞–¥": "back_menu"}))
        await callback.answer()
    finally:
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        if os.path.exists(qr_filename):
            os.remove(qr_filename)

    
# FAQ
@user_private_router.callback_query(F.data == "faq")
async def orders_list(callback: types.CallbackQuery, session):
    await callback.answer()
    message_text = "<b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>\n\n"
    orders = await orm_get_faq(session)
    number = 1
    for order in orders:
        message_text += f"{number}. {order.ask} \n{order.answer}\n\n"
        number += 1
    await callback.message.edit_caption(
            caption=message_text,
            reply_markup=get_callback_btns(btns={ "‚¨Ö –ù–∞–∑–∞–¥": "back_menu"})
        )


# Check subscription
@user_private_router.callback_query(F.data.startswith('check_subscription'))
async def check_subscription(callback: types.CallbackQuery, session):
    user_id = callback.from_user.id
    user = await orm_get_user(session, user_id)
    if user.status > 0:
        await callback.message.edit_caption(caption=f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {user.sub_end}")
    else:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")

